// Example program -- http://cpp.sh/
#include <iostream>
#include <string>
#include <math.h>
#include <vector>

#define SWAP(a,b)tempr=(a);(a)=(b);(b)=tempr

void FFT(float data[], unsigned long number_of_complex_samples,
                     int isign) {
  // variables for trigonometric recurrences
  unsigned long n, mmax, m, j, istep, i;
  double wtemp, wr, wpr, wpi, wi, theta, tempr, tempi;
  float pi = 3.14159265;

  // the complex array is real+complex so the array
  // as a size n = 2* number of complex samples
  // real part is the data[index] and
  // the complex part is the data[index+1]
  n = number_of_complex_samples * 2;

  // binary inversion (note that the indexes
  // start from 0 witch means that the
  // real part of the complex is on the even-indexes
  // and the complex part is on the odd-indexes
  j = 0;
  for (i = 0; i < n / 2; i += 2) {
    if (j > i) {
      // swap the real part
      SWAP(data[j], data[i]);
      // swap the complex part
      SWAP(data[j + 1], data[i + 1]);
      // checks if the changes occurs in the first half
      // and use the mirrored effect on the second half
      if ((j / 2) < (n / 4)) {
        // swap the real part
        SWAP(data[(n - (i + 2))], data[(n - (j + 2))]);
        // swap the complex part
        SWAP(data[(n - (i + 2)) + 1], data[(n - (j + 2)) + 1]);
      }
    }
    m = n / 2;
    while (m >= 2 && j >= m) {
      j -= m;
      m = m / 2;
    }
    j += m;
  }

  // Danielson-Lanzcos routine
  mmax = 2;
  // external loop
  while (n > mmax) {
    istep = mmax << 1;
    theta = -1 * (2 * pi / mmax);
    wtemp = sin(0.5 * theta);
    wpr = -2.0 * wtemp * wtemp;
    wpi = sin(theta);
    wr = 1.0;
    wi = 0.0;
    // internal loops
    for (m = 1; m < mmax; m += 2) {
      for (i = m; i <= n; i += istep) {
        j = i + mmax;
        tempr = wr * data[j - 1] - wi * data[j];
        tempi = wr * data[j] + wi * data[j - 1];
        data[j - 1] = data[i - 1] - tempr;
        data[j] = data[i] - tempi;
        data[i - 1] += tempr;
        data[i] += tempi;
      }
      wr = (wtemp = wr) * wpr - wi * wpi + wr;
      wi = wi * wpr + wtemp * wpi + wi;
    }
    mmax = istep;
  }
}


int main()
{
  // std::string name;
  // std::cout << "What is your name? ";
  // getline (std::cin, name);
  // std::cout << "Hello, " << name << "!\n";
  size_t size = 1024;
  float data[size];
  // float* temp[512];
  // get_sine(temp);
  // float temp[512] = {
  //     0,         0.091909,  0.18304,   0.27262,    0.3599,    0.44412,
  //     0.52459,   0.60062,   0.67156,   0.73682,    0.79584,   0.84812,
  //     0.89322,   0.93077,   0.96043,   0.98196,    0.99518,   0.99998,
  //     0.99631,   0.98421,   0.96378,   0.93518,    0.89867,   0.85456,
  //     0.80321,   0.74506,   0.6806,    0.61038,    0.535,     0.45508,
  //     0.37132,   0.28441,   0.19509,   0.10412,    0.012272,  -0.079682,
  //     -0.17096,  -0.26079,  -0.34842,  -0.43309,   -0.5141,   -0.59076,
  //     -0.66242,  -0.72846,  -0.78835,  -0.84155,   -0.88764,  -0.92621,
  //     -0.95694,  -0.97957,  -0.99391,  -0.99983,   -0.99729,  -0.98631,
  //     -0.96698,  -0.93946,  -0.90399,  -0.86087,   -0.81046,  -0.75319,
  //     -0.68954,  -0.62006,  -0.54532,  -0.46598,   -0.38268,  -0.29615,
  //     -0.20711,  -0.11632,  -0.024541, 0.067444,   0.15886,   0.24893,
  //     0.33689,   0.422,     0.50354,   0.58081,    0.65317,   0.72,
  //     0.78074,   0.83486,   0.88192,   0.92151,    0.95331,   0.97703,
  //     0.99248,   0.99953,   0.99812,   0.98826,    0.97003,   0.94359,
  //     0.90917,   0.86705,   0.81758,   0.7612,     0.69838,   0.62964,
  //     0.55557,   0.4768,    0.39399,   0.30785,    0.2191,    0.1285,
  //     0.036807,  -0.055195, -0.14673,  -0.23702,   -0.32531,  -0.41084,
  //     -0.4929,   -0.57078,  -0.64383,  -0.71143,   -0.77301,  -0.82805,
  //     -0.87607,  -0.91668,  -0.94953,  -0.97434,   -0.9909,   -0.99908,
  //     -0.9988,   -0.99006,  -0.97294,  -0.94759,   -0.91421,  -0.87309,
  //     -0.82459,  -0.7691,   -0.70711,  -0.63912,   -0.56573,  -0.48755,
  //     -0.40524,  -0.3195,   -0.23106,  -0.14066,   -0.049068, 0.042938,
  //     0.13458,   0.22508,   0.31368,   0.39962,    0.48218,   0.56066,
  //     0.63439,   0.70275,   0.76517,   0.8211,     0.87009,   0.91171,
  //     0.94561,   0.9715,    0.98918,   0.99848,    0.99932,   0.99171,
  //     0.9757,    0.95144,   0.91911,   0.87901,    0.83147,   0.77689,
  //     0.71573,   0.64851,   0.57581,   0.49823,    0.41643,   0.33111,
  //     0.24298,   0.1528,    0.061321,  -0.030675,  -0.12241,  -0.21311,
  //     -0.30201,  -0.38835,  -0.4714,   -0.55046,   -0.62486,  -0.69397,
  //     -0.75721,  -0.81404,  -0.86397,  -0.9066,    -0.94154,  -0.96852,
  //     -0.9873,   -0.99772,  -0.9997,   -0.99321,   -0.97832,  -0.95514,
  //     -0.92388,  -0.8848,   -0.83822,  -0.78456,   -0.72425,  -0.65781,
  //     -0.5858,   -0.50883,  -0.42756,  -0.34266,   -0.25487,  -0.16491,
  //     -0.073565, 0.018407,  0.11022,   0.2011,     0.29028,   0.37701,
  //     0.46054,   0.54017,   0.61523,   0.68508,    0.74914,   0.80685,
  //     0.85773,   0.90135,   0.93734,   0.96539,    0.98528,   0.99682,
  //     0.99992,   0.99456,   0.98079,   0.9587,     0.92851,   0.89045,
  //     0.84485,   0.79211,   0.73265,   0.667,      0.5957,    0.51936,
  //     0.43862,   0.35416,   0.26671,   0.177,      0.085797,  -0.0061359,
  //     -0.098017, -0.18907,  -0.27852,  -0.36561,   -0.44961,  -0.5298,
  //     -0.60551,  -0.67609,  -0.74095,  -0.79954,   -0.85136,  -0.89597,
  //     -0.93299,  -0.96212,  -0.98311,  -0.99577,   -1,        -0.99577,
  //     -0.98311,  -0.96212,  -0.93299,  -0.89597,   -0.85136,  -0.79954,
  //     -0.74095,  -0.67609,  -0.60551,  -0.5298,    -0.44961,  -0.36561,
  //     -0.27852,  -0.18907,  -0.098017, -0.0061359, 0.085797,  0.177,
  //     0.26671,   0.35416,   0.43862,   0.51936,    0.5957,    0.667,
  //     0.73265,   0.79211,   0.84485,   0.89045,    0.92851,   0.9587,
  //     0.98079,   0.99456,   0.99992,   0.99682,    0.98528,   0.96539,
  //     0.93734,   0.90135,   0.85773,   0.80685,    0.74914,   0.68508,
  //     0.61523,   0.54017,   0.46054,   0.37701,    0.29028,   0.2011,
  //     0.11022,   0.018407,  -0.073565, -0.16491,   -0.25487,  -0.34266,
  //     -0.42756,  -0.50883,  -0.5858,   -0.65781,   -0.72425,  -0.78456,
  //     -0.83822,  -0.8848,   -0.92388,  -0.95514,   -0.97832,  -0.99321,
  //     -0.9997,   -0.99772,  -0.9873,   -0.96852,   -0.94154,  -0.9066,
  //     -0.86397,  -0.81404,  -0.75721,  -0.69397,   -0.62486,  -0.55046,
  //     -0.4714,   -0.38835,  -0.30201,  -0.21311,   -0.12241,  -0.030675,
  //     0.061321,  0.1528,    0.24298,   0.33111,    0.41643,   0.49823,
  //     0.57581,   0.64851,   0.71573,   0.77689,    0.83147,   0.87901,
  //     0.91911,   0.95144,   0.9757,    0.99171,    0.99932,   0.99848,
  //     0.98918,   0.9715,    0.94561,   0.91171,    0.87009,   0.8211,
  //     0.76517,   0.70275,   0.63439,   0.56066,    0.48218,   0.39962,
  //     0.31368,   0.22508,   0.13458,   0.042938,   -0.049068, -0.14066,
  //     -0.23106,  -0.3195,   -0.40524,  -0.48755,   -0.56573,  -0.63912,
  //     -0.70711,  -0.7691,   -0.82459,  -0.87309,   -0.91421,  -0.94759,
  //     -0.97294,  -0.99006,  -0.9988,   -0.99908,   -0.9909,   -0.97434,
  //     -0.94953,  -0.91668,  -0.87607,  -0.82805,   -0.77301,  -0.71143,
  //     -0.64383,  -0.57078,  -0.4929,   -0.41084,   -0.32531,  -0.23702,
  //     -0.14673,  -0.055195, 0.036807,  0.1285,     0.2191,    0.30785,
  //     0.39399,   0.4768,    0.55557,   0.62964,    0.69838,   0.7612,
  //     0.81758,   0.86705,   0.90917,   0.94359,    0.97003,   0.98826,
  //     0.99812,   0.99953,   0.99248,   0.97703,    0.95331,   0.92151,
  //     0.88192,   0.83486,   0.78074,   0.72,       0.65317,   0.58081,
  //     0.50354,   0.422,     0.33689,   0.24893,    0.15886,   0.067444,
  //     -0.024541, -0.11632,  -0.20711,  -0.29615,   -0.38268,  -0.46598,
  //     -0.54532,  -0.62006,  -0.68954,  -0.75319,   -0.81046,  -0.86087,
  //     -0.90399,  -0.93946,  -0.96698,  -0.98631,   -0.99729,  -0.99983,
  //     -0.99391,  -0.97957,  -0.95694,  -0.92621,   -0.88764,  -0.84155,
  //     -0.78835,  -0.72846,  -0.66242,  -0.59076,   -0.5141,   -0.43309,
  //     -0.34842,  -0.26079,  -0.17096,  -0.079682,  0.012272,  0.10412,
  //     0.19509,   0.28441,   0.37132,   0.45508,    0.535,     0.61038,
  //     0.6806,    0.74506,   0.80321,   0.85456,    0.89867,   0.93518,
  //     0.96378,   0.98421,   0.99631,   0.99998,    0.99518,   0.98196,
  //     0.96043,   0.93077,   0.89322,   0.84812,    0.79584,   0.73682,
  //     0.67156,   0.60062,   0.52459,   0.44412,    0.3599,    0.27262,
  //     0.18304,   0.091909};
  //sine wave with 180 hz noise
  float temp[512] = {
      0,       16.482,  32.457,  47.451,  61.052,  72.934,  82.877,  90.778,
      96.651,  100.63,  102.93,  103.86,  103.77,  103.03,  102,     101,
      100.28,  100,     100.22,  100.89,  101.86,  102.9,   103.7,   103.9,
      103.12,  101.02,  97.287,  91.676,  84.049,  74.375,  62.741,  49.353,
      34.522,  18.652,  2.2087,  -14.302, -30.373, -45.524, -59.332, -71.458,
      -81.668, -89.843, -95.982, -100.2,  -102.71, -103.8,  -103.83, -103.15,
      -102.14, -101.13, -100.36, -100.01, -100.16, -100.78, -101.72, -102.77,
      -103.62, -103.92, -103.29, -101.39, -97.889, -92.539, -85.185, -75.781,
      -64.4,   -51.229, -36.569, -20.811, -4.4162, 12.115,  28.274,  43.573,
      57.581,  69.948,  80.423,  88.872,  95.278,  99.74,   102.46,  103.72,
      103.87,  103.27,  102.29,  101.25,  100.44,  100.03,  100.11,  100.67,
      101.58,  102.64,  103.53,  103.92,  103.44,  101.73,  98.458,  93.366,
      86.284,  77.152,  66.026,  53.079,  38.597,  22.96,   6.6213,  -9.9217,
      -26.159, -41.599, -55.802, -68.404, -79.142, -87.864, -94.539, -99.251,
      -102.19, -103.63, -103.9,  -103.38, -102.43, -101.38, -100.53, -100.06,
      -100.07, -100.57, -101.45, -102.5,  -103.43, -103.91, -103.57, -102.04,
      -98.995, -94.157, -87.347, -78.488, -67.62,  -54.901, -40.604, -25.096,
      -8.8227, 7.7226,  24.03,   39.603,  53.994,  66.827,  77.824,  86.82,
      93.766,  98.731,  101.89,  103.51,  103.92,  103.48,  102.57,  101.52,
      100.62,  100.09,  100.04,  100.48,  101.32,  102.36,  103.33,  103.89,
      103.68,  102.33,  99.5,    94.913,  88.373,  79.787,  69.18,   56.695,
      42.589,  27.218,  11.019,  -5.5192, -21.887, -37.586, -52.157, -65.217,
      -76.471, -85.739, -92.957, -98.178, -101.57, -103.37, -103.92, -103.58,
      -102.7,  -101.65, -100.72, -100.14, -100.02, -100.4,  -101.19, -102.22,
      -103.21, -103.85, -103.76, -102.59, -99.973, -95.634, -89.362, -81.05,
      -70.707, -58.46,  -44.551, -29.326, -13.21,  3.3127,  19.733,  35.548,
      50.294,  63.574,  75.083,  84.622,  92.112,  97.592,  101.21,  103.21,
      103.91,  103.66,  102.84,  101.79,  100.83,  100.19,  100,     100.32,
      101.06,  102.07,  103.09,  103.8,   103.83,  102.82,  100.42,  96.321,
      90.315,  82.277,  72.2,    60.196,  46.49,   31.417,  15.393,  -1.1044,
      -17.568, -33.492, -48.405, -61.901, -73.659, -83.468, -91.231, -96.973,
      -100.83, -103.03, -103.88, -103.73, -102.97, -101.93, -100.95, -100.25,
      -100,    -100.25, -100.95, -101.93, -102.97, -103.73, -103.88, -103.03,
      -100.83, -96.973, -91.231, -83.468, -73.659, -61.901, -48.405, -33.492,
      -17.568, -1.1044, 15.393,  31.417,  46.49,   60.196,  72.2,    82.277,
      90.315,  96.321,  100.42,  102.82,  103.83,  103.8,   103.09,  102.07,
      101.06,  100.32,  100,     100.19,  100.83,  101.79,  102.84,  103.66,
      103.91,  103.21,  101.21,  97.592,  92.112,  84.622,  75.083,  63.574,
      50.294,  35.548,  19.733,  3.3127,  -13.21,  -29.326, -44.551, -58.46,
      -70.707, -81.05,  -89.362, -95.634, -99.973, -102.59, -103.76, -103.85,
      -103.21, -102.22, -101.19, -100.4,  -100.02, -100.14, -100.72, -101.65,
      -102.7,  -103.58, -103.92, -103.37, -101.57, -98.178, -92.957, -85.739,
      -76.471, -65.217, -52.157, -37.586, -21.887, -5.5192, 11.019,  27.218,
      42.589,  56.695,  69.18,   79.787,  88.373,  94.913,  99.5,    102.33,
      103.68,  103.89,  103.33,  102.36,  101.32,  100.48,  100.04,  100.09,
      100.62,  101.52,  102.57,  103.48,  103.92,  103.51,  101.89,  98.731,
      93.766,  86.82,   77.824,  66.827,  53.994,  39.603,  24.03,   7.7226,
      -8.8227, -25.096, -40.604, -54.901, -67.62,  -78.488, -87.347, -94.157,
      -98.995, -102.04, -103.57, -103.91, -103.43, -102.5,  -101.45, -100.57,
      -100.07, -100.06, -100.53, -101.38, -102.43, -103.38, -103.9,  -103.63,
      -102.19, -99.251, -94.539, -87.864, -79.142, -68.404, -55.802, -41.599,
      -26.159, -9.9217, 6.6213,  22.96,   38.597,  53.079,  66.026,  77.152,
      86.284,  93.366,  98.458,  101.73,  103.44,  103.92,  103.53,  102.64,
      101.58,  100.67,  100.11,  100.03,  100.44,  101.25,  102.29,  103.27,
      103.87,  103.72,  102.46,  99.74,   95.278,  88.872,  80.423,  69.948,
      57.581,  43.573,  28.274,  12.115,  -4.4162, -20.811, -36.569, -51.229,
      -64.4,   -75.781, -85.185, -92.539, -97.889, -101.39, -103.29, -103.92,
      -103.62, -102.77, -101.72, -100.78, -100.16, -100.01, -100.36, -101.13,
      -102.14, -103.15, -103.83, -103.8,  -102.71, -100.2,  -95.982, -89.843,
      -81.668, -71.458, -59.332, -45.524, -30.373, -14.302, 2.2087,  18.652,
      34.522,  49.353,  62.741,  74.375,  84.049,  91.676,  97.287,  101.02,
      103.12,  103.9,   103.7,   102.9,   101.86,  100.89,  100.22,  100,
      100.28,  101,     102,     103.03,  103.77,  103.86,  102.93,  100.63,
      96.651,  90.778,  82.877,  72.934,  61.052,  47.451,  32.457,  16.482};

  for (size_t i = 0; i < size; i++) {
    if (i % 2 == 0)
      data[i] = temp[i / 2];
    else
      data[i] = 0;
  }

  FFT(data, size/2, 1);

  float denom = 0;
  // for (size_t i = 0; i < size; i++) {
  //   if (i < size / 2) {
  //     this->_pData[i] = data[i];
  //   } else {
  //     this->_pData[i] = 0;
  //   }
  // }

  float denom2 = 0;
  int _SAMPLE_RATE = 4096;

  int resolution =
      _SAMPLE_RATE /
      size; // size of our fft is actually size/2, hence 2 in numerator
  for (size_t i = 1; i <= 6; i++) {
    double intpart;
    int index = i * 60;
    double fracpart = (float)index / (float)resolution;
    float frac = modf(fracpart, &intpart);
    index = intpart;
    std::cout << index << std::endl;
    std::cout << "SIZE: " << size << std::endl;
    // this->_harmonics[i] =
    //     (this->_pData[index] * (1 - frac) + this->_pData[index + 2] * frac);
    // this->_harmonics[i] = roundf(1000 * this->_harmonics[i]) / 1000;
  }

  for(unsigned i = 0; i < size; ++i) {
    std::cout << data[i] << std::endl;
  }

  return 0;
}